package org.graalvm.vm.trcview.arch.z80.disasm;

import org.graalvm.vm.trcview.arch.CodeReader;

public class Z80Info {
    // @formatter:off
    private static final int LENGTH_ED[] = {
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 4, 2, 2, 2, 2,
        2, 2, 2, 4, 2, 2, 2, 2,
        2, 2, 2, 4, 2, 2, 2, 2,
        2, 2, 2, 4, 2, 2, 2, 2,
        2, 2, 2, 4, 2, 2, 2, 2,
        2, 2, 2, 4, 2, 2, 2, 2,
        2, 2, 2, 4, 2, 2, 2, 2,
        2, 2, 2, 4, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2
    };

    private static final int LENGTH_XX[] = {
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 4, 4, 2, 2, 2, 3, 2,
        2, 2, 4, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 3, 3, 4, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        3, 3, 3, 3, 3, 3, 2, 3,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 3, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2
    };

    private static final int LENGTH_MAIN[] = {
        1, 3, 1, 1, 1, 1, 2, 1,
        1, 1, 1, 1, 1, 1, 2, 1,
        2, 3, 1, 1, 1, 1, 2, 1,
        2, 1, 1, 1, 1, 1, 2, 1,
        2, 3, 3, 1, 1, 1, 2, 1,
        2, 1, 3, 1, 1, 1, 2, 1,
        2, 3, 3, 1, 1, 1, 2, 1,
        2, 1, 3, 1, 1, 1, 2, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 3, 3, 3, 1, 2, 1,
        1, 1, 3, 1, 3, 3, 2, 1,
        1, 1, 3, 2, 3, 1, 2, 1,
        1, 1, 3, 2, 3, 1, 2, 1,
        1, 1, 3, 1, 3, 1, 2, 1,
        1, 1, 3, 1, 3, 1, 2, 1,
        1, 1, 3, 1, 3, 1, 2, 1,
        1, 1, 3, 1, 3, 1, 2, 1
    };
    // @formatter:on

    public static int getCodeLength(CodeReader code) {
        int code0 = Byte.toUnsignedInt(code.nextI8());
        int code1;
        switch (code0) {
            case 0xCB:
                return 2;
            case 0xED:
                return LENGTH_ED[Byte.toUnsignedInt(code.nextI8())];
            case 0xDD:
                code1 = Byte.toUnsignedInt(code.nextI8());
                switch (code1) {
                    case 0xcb:
                        return 4;
                    default:
                        return LENGTH_XX[code1];
                }
            case 0xFD:
                code1 = Byte.toUnsignedInt(code.nextI8());
                switch (code1) {
                    case 0xcb:
                        return 4;
                    default:
                        return LENGTH_XX[code1];
                }
            default:
                return LENGTH_MAIN[code0];
        }
    }
}
